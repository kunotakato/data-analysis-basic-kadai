#step1
from sklearn.datasets import load_wine

dataset = load_wine()
dataset

dataset.data

dataset.feature_names

# データを見やすくするためにpandasのDataFrameを使用して表示。
import pandas as pd
df = pd.DataFrame(dataset.data, columns = dataset.feature_names)
df.head()

dataset.target
# ワインの成分を表示させたDataFrameに、ワインの種別を追加
df['category'] = dataset.target
df.head()

# 説明変数（ワインの成分）に変数 X
# 目的変数（ワインの種別）を変数 Yに代入

X = dataset.data
y = dataset.target

# XとYをそれぞれ学習データとテストデータに分割
# model_selectionモジュールｎtrain_test_split関数を実行することで、分割可能。
# 1　train_test_split関数をインポート

from sklearn.model_selection import train_test_split

# test_sizeに0.3を指定するとテストデータに全体の30％のレコードを配分

train_test_split(X, y, test_size = 0.3, random_state = 5)
#以下のようにrandom_stateを指定しない場合、実行ごとに結果が異なる。
# train_test_split(X, y, test_size = 0.3)

# それぞれの要素に変数 X_train, X_test, y_train, y_test に代入
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 5)
#　実際に 7:3 に分割されているか、レコード数を確認
print(X.shape, X_train.shape, X_test.shape, y.shape, y_train.shape, y_test.shape)

# step2 インスタンス化で記載するコードを「決定木」から「ランダムフォレスト」へ変更
from sklearn.ensemble import RandomForestClassifier

# インポートしたRandomForestClassifierクラスをインスタンス化し、model（変数）に代入
model = RandomForestClassifier(random_state = 3 )

# step3
#　fitメソッドの引数に指定するでーたは説明変数 X（ワインの成分）の学習データと目的変数 y （ワインの種別）の学習データ。

#　第1引数にX_train, 第2引数にy_trainを指定。
model.fit(X_train, y_train)

# 説明変数 X (ワインの成分) のテストデータから、ワインの種別を予測

y_pred = model.predict(X_test)
y_pred

# 目的変数 y(ワインの種別)のテストデータを確認
y_test

# 正解率を出すために、accuracy_score関数をインポート

from sklearn.metrics import accuracy_score
accuracy_score(y_test, y_pred)
